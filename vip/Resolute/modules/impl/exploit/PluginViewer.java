package vip.Resolute.modules.impl.exploit;

import vip.Resolute.Resolute;
import vip.Resolute.events.Event;
import vip.Resolute.events.impl.EventMotion;
import vip.Resolute.events.impl.EventPacket;
import vip.Resolute.modules.Module;
import vip.Resolute.settings.impl.NumberSetting;
import vip.Resolute.util.misc.TimerUtil;
import joptsimple.internal.Strings;
import net.minecraft.network.play.client.C14PacketTabComplete;
import net.minecraft.network.play.server.S3APacketTabComplete;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class PluginViewer extends Module {
    private NumberSetting timeout = new NumberSetting("Timeout", 5, 0, 10, 1);

    private List<String> plugins = new ArrayList<>();

    private boolean scan;

    private TimerUtil timer = new TimerUtil();

    public PluginViewer() {
        super("PluginViewer", 0, "Prints out server plugins", Category.EXPLOIT);
    }

    public void onEnable() {
        super.onEnable();
        if (this.mc.thePlayer == null)
            return;
        this.mc.getNetHandler().sendPacketNoEvent(new C14PacketTabComplete("/"));
        this.scan = true;
        this.plugins.clear();
        this.timer.reset();
    }

    public void onDisable() {
        super.onDisable();
        this.scan = false;
        this.timer.reset();
    }

    public void onEvent(Event e) {
        if(e instanceof EventMotion) {
            if(e.isPre() && this.timer.hasElapsed((long) (this.timeout.getValue() * 300))) {
                this.timer.reset();
                toggle();
            }
        }

        if(e instanceof EventPacket) {
            if(((EventPacket) e).getPacket() instanceof S3APacketTabComplete && this.scan) {
                S3APacketTabComplete packet2 = ((EventPacket) e).getPacket();
                String[] commands = packet2.func_149630_c();
                byte b;
                int i;
                String[] arrayOfString1;
                for (i = (arrayOfString1 = commands).length, b = 0; b < i; ) {
                    String s = arrayOfString1[b];
                    String[] split = s.split(":");
                    if (split.length > 1) {
                        String in = split[0].replaceAll("/", "");
                        if (!this.plugins.contains(in))
                            this.plugins.add(in);
                    }
                    b++;
                }
                Collections.sort(this.plugins);
                if (this.plugins.isEmpty()) {
                    Resolute.addChatMessage("No plugins found");
                } else {
                    Resolute.addChatMessage("[n]Plugins [t]([v]" + this.plugins.size() + "[t]): [v]" + Strings.join(this.plugins.<String>toArray(new String[0]), "[t], [v]"));
                }
            }
        }
    }
}
