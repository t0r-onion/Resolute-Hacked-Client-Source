package vip.Resolute.modules.impl.exploit;

import vip.Resolute.Resolute;
import vip.Resolute.events.Event;
import vip.Resolute.events.impl.EventMotion;
import vip.Resolute.events.impl.EventPacket;
import vip.Resolute.events.impl.EventUpdate;
import vip.Resolute.modules.Module;
import vip.Resolute.modules.impl.combat.KillAura;
import vip.Resolute.settings.impl.BooleanSetting;
import vip.Resolute.settings.impl.ModeSetting;
import vip.Resolute.settings.impl.NumberSetting;
import vip.Resolute.ui.notification.Notification;
import vip.Resolute.ui.notification.NotificationType;
import vip.Resolute.util.misc.MathUtils;
import vip.Resolute.util.misc.TimerUtil;
import vip.Resolute.util.misc.TimerUtils;
import net.minecraft.entity.player.PlayerCapabilities;
import net.minecraft.network.Packet;
import net.minecraft.network.handshake.client.C00Handshake;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S00PacketKeepAlive;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S32PacketConfirmTransaction;
import net.minecraft.network.play.server.S39PacketPlayerAbilities;
import org.apache.commons.lang3.RandomUtils;

import static java.lang.Float.MAX_VALUE;

import java.util.*;
import java.util.concurrent.ConcurrentLinkedQueue;

public class Disabler extends Module {

    public ModeSetting mode = new ModeSetting("Mode", "Ping",   "Ping", "Verus Combat", "Capabilities", "Verus-Semi", "AACv5", "LatinPlay", "C00", "Minemen", "MineplexCombat", "Ghostly", "Vicnix", "Spectator", "13369", "Transaction");

    public NumberSetting pingDelay = new NumberSetting("Ping Delay", 5000, this::isModeSelected,10, 10000, 10);

    public BooleanSetting removeLagBack = new BooleanSetting("Remove Lagback", true, () -> mode.is("Verus-Semi"));

    public BooleanSetting c0fProp = new BooleanSetting("C0F", true, () -> mode.is("Minemen"));
    public BooleanSetting c00Prop = new BooleanSetting("C00", false, () -> mode.is("Minemen"));

    public TimerUtils timerUtils = new TimerUtils();
    public TimerUtil timer = new TimerUtil();

    private final List<Packet<?>> packets = new ArrayList<>();

    private final TimerUtils packetTimer = new TimerUtils();

    private final List<Packet<?>> packetBuffer = new ArrayList<>();
    private final ArrayDeque<Packet> list = new ArrayDeque<>();

    private LinkedList<Packet> packetQueue = new LinkedList();
    private Queue<Short> queueID = new ConcurrentLinkedQueue<>();
    public boolean isDisabling = false;
    Short uid = -1;

    TimerUtil disableTime = new TimerUtil();
    private int aac5Status = 0;
    private double aac5LastPosX = 0.0D;
    private int aac5Same = 0;
    private C03PacketPlayer.C06PacketPlayerPosLook aac5QueuedPacket = null;
    private int aac5SameReach = 5;

    private List<C0FPacketConfirmTransaction> c0fs = new ArrayList<>();
    private List<C00PacketKeepAlive> c00s = new ArrayList<>();

    public boolean isModeSelected() {
        return this.mode.is("Ping");
    }

    public Disabler() {
        super("Disabler", 0, "Disables anticheat checks", Category.EXPLOIT);
        this.addSettings(mode, pingDelay, removeLagBack, c0fProp, c00Prop);
    }

    public void onEnable() {
        int currentTrans = 0;
        timer.reset();
        c0fs.clear();
        c00s.clear();
        if(mode.is("AACv5")) {
            double x = this.mc.thePlayer.posX;
            double y = this.mc.thePlayer.posY;
            double z = this.mc.thePlayer.posZ;
            mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(x, Double.MAX_VALUE, z, true));
            this.aac5LastPosX = 0.0D;
            this.aac5QueuedPacket = null;
            this.aac5Same = 0;
            this.aac5SameReach = 5;
            this.aac5Status = 0;
        }
        this.packetQueue.clear();

        if(mode.is("AntiAC")) {
            Resolute.addChatMessage("Disabling in 3 Seconds....");
        }

        if(mode.is("LatinPlay")) {
            Resolute.getNotificationManager().add(new Notification("Disabling", "Please wait 10 seconds...", 10000L, NotificationType.WARNING));
            isDisabling = true;
        }
        disableTime.reset();

        super.onEnable();
    }

    public void onDisable() {
        int currentTrans = 0;
        super.onDisable();
        mc.thePlayer.capabilities.allowFlying = false;
        isDisabling = false;
        c0fs.clear();
        c00s.clear();
    }

    public void onEvent(Event e) {
        this.setSuffix("");

        if(e instanceof EventMotion) {
            EventMotion event = (EventMotion) e;
            if(mode.is("Ping")) {
                if(mc.thePlayer.ticksExisted < 5 && packets.size() > 0) {
                    packets.clear();
                }

                if(packetTimer.hasTimeElapsed((long) (pingDelay.getValue()), true)) {
                    while(packets.size() > 0)
                        mc.getNetHandler().sendPacketNoEvent(packets.remove(0));
                    packetTimer.reset();
                }
            }

            if(mode.is("Verus-Semi")) {
                if (mc.thePlayer.ticksExisted % 180 == 0) {
                    while (list.size() > 22) {
                        mc.getNetHandler().sendPacketNoEvent(list.poll());
                    }
                }
            }

            if(mode.is("LatinPlay")) {
                if(isDisabling && disableTime.hasElapsed(10000)) {
                    Resolute.getNotificationManager().add(new Notification("AntiCheat Disabled", "Disabler is unstable for now", 3000L, NotificationType.SUCCESS));
                    isDisabling = false;
                }

                if(mc.thePlayer.ticksExisted < 5 && packets.size() > 0) {
                    packets.clear();
                }

                if(packetTimer.hasTimeElapsed((long) (1000), true)) {
                    while(packets.size() > 0)
                        mc.getNetHandler().sendPacketNoEvent(packets.remove(0));
                    packetTimer.reset();
                }
            }

            if(mode.is("Karhu")) {
                if (mc.thePlayer.ticksExisted % 200 == 0) {
                    mc.getNetHandler().sendPacketNoEvent(new C0FPacketConfirmTransaction(0, (short) MathUtils.getRandomInRange(-32767, 32767), true));
                }

            }

            if(mode.is("Watchdog")) {
                if (this.mc.thePlayer.ticksExisted % 180 == 0) {
                    while(this.packetQueue.size() > 22) {
                        mc.getNetHandler().sendPacketNoEvent((Packet)this.packetQueue.poll());
                    }
                }
            }

            if(mode.is("Karhu Dev")) {
                mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX,mc.thePlayer.posY + 0.125D, mc.thePlayer.posZ, false));
                if (mc.thePlayer.ticksExisted % 20 == 0) {
                    for (int i = 0; i < 20; i++) {
                        mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition( mc.thePlayer.posX, mc.thePlayer.posY + 0.300001D, mc.thePlayer.posZ, false));
                        mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, false));
                    }
                    mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX,  mc.thePlayer.posY, mc.thePlayer.posZ, true));
                }
            }
        }

        if(e instanceof EventUpdate) {
            if(mode.is("AACv5")) {
                if(mc.thePlayer.onGround) {
                    Resolute.getNotificationManager().add(new Notification("Warning", "Jump into the air first and then toggle", 4000L, NotificationType.WARNING));
                    toggled = false;
                } else {
                    this.mc.gameSettings.keyBindForward.pressed = this.aac5Status != 1;
                    this.mc.thePlayer.motionX = 0.0D;
                    this.mc.thePlayer.motionZ = 0.0D;
                    this.mc.thePlayer.motionY = 0.0D;
                    this.mc.thePlayer.rotationYaw = this.mc.thePlayer.rotationYaw;
                    this.mc.thePlayer.rotationPitch = this.mc.thePlayer.rotationPitch;

                    if (this.aac5Status == 1) {
                        if (this.aac5QueuedPacket != null) {
                            mc.getNetHandler().sendPacketNoEvent(this.aac5QueuedPacket);
                            double dist = 0.13D;
                            double yaw = Math.toRadians((double)this.mc.thePlayer.rotationYaw);
                            double x = -Math.sin(yaw) * dist;
                            double z = Math.cos(yaw) * dist;
                            this.mc.thePlayer.setPosition(this.mc.thePlayer.posX + x, this.mc.thePlayer.posY, this.mc.thePlayer.posZ + z);
                            mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, this.mc.thePlayer.posY, this.mc.thePlayer.posZ, false));
                        }

                        mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, Double.MAX_VALUE, this.mc.thePlayer.posZ, true));
                        this.aac5QueuedPacket = new C03PacketPlayer.C06PacketPlayerPosLook(this.mc.thePlayer.posX, this.mc.thePlayer.posY, this.mc.thePlayer.posZ, this.mc.thePlayer.rotationYaw, this.mc.thePlayer.rotationPitch, false);
                    }
                }
            }


            if(mode.is("Transaction")) {
                if(e.isPre()) {
                    mc.getNetHandler().sendPacketNoEvent(new C0FPacketConfirmTransaction(0, (short) MathUtils.getRandomInRange(-32767, 32767), false));
                }
            }



            if(mode.is("Spectator")) {
                if(e.isPre()) {
                    mc.getNetHandler().sendPacketNoEvent(new C18PacketSpectate(mc.thePlayer.getUniqueID()));
                }
            }

            if(mode.is("Ghostly")) {
                if(mc.thePlayer.ticksExisted % 3 == 0) {
                    mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, mc.thePlayer.onGround));
                    mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C05PacketPlayerLook(mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, mc.thePlayer.onGround));
                    mc.getNetHandler().sendPacketNoEvent(new C18PacketSpectate(mc.thePlayer.getUniqueID()));
                }
                mc.thePlayer.sendQueue.addToSendQueue(new C0CPacketInput());
            }


            if(mode.is("Vicnix Old")) {

                if(mc.thePlayer.ticksExisted % 3 == 0) {
                    mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, mc.thePlayer.onGround));
                    mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C05PacketPlayerLook(mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, mc.thePlayer.onGround));

                }

                if(mc.thePlayer.ticksExisted % 40 == 0) {
                    mc.getNetHandler().sendPacketNoEvent(new C0CPacketInput(mc.thePlayer.movementInput.moveStrafe, mc.thePlayer.movementInput.moveForward, mc.thePlayer.movementInput.jump, mc.thePlayer.movementInput.sneak));
                   mc.getNetHandler().sendPacketNoEvent(new C18PacketSpectate(mc.thePlayer.getUniqueID()));
                }
            }
        }

        if(e instanceof EventPacket) {
            if(mode.is("C00")) {
                if(((EventPacket) e).getPacket() instanceof C00PacketKeepAlive) {
                    e.setCancelled(true);
                }
            }

            if(mode.is("Watchdog Timer")) {
                if (((EventPacket) e).getPacket() instanceof C00PacketKeepAlive) {
                    C00PacketKeepAlive c00 = (C00PacketKeepAlive) ((EventPacket) e).getPacket();
                    e.setCancelled(true);
                    c00s.add(c00);
                    if (c00s.size() >= 5) {
                        for (C00PacketKeepAlive pack : c00s) {
                            this.mc.getNetHandler().sendPacketNoEvent(pack);
                        }
                        c00s.clear();
                    }
                }

                if (((EventPacket) e).getPacket() instanceof C0FPacketConfirmTransaction) {
                    C0FPacketConfirmTransaction c0f = (C0FPacketConfirmTransaction) ((EventPacket) e).getPacket();
                    if (c0f.getWindowId() == 0 && c0f.getUid() < 0) {
                        e.setCancelled(true);
                        c0fs.add(c0f);
                    }
                    if (c0fs.size() >= 5) {
                        for (C0FPacketConfirmTransaction pack : c0fs) {
                            this.mc.getNetHandler().sendPacketNoEvent(pack);
                        }
                        c0fs.clear();
                    }
                }
            }

            if(mode.is("Watchdog")) {
                double x;
                double y;
                S08PacketPlayerPosLook packet;

                if (this.mc.thePlayer != null && this.mc.thePlayer.ticksExisted == 0) {
                    this.packetQueue.clear();
                }

               if (((EventPacket) e).getPacket() instanceof C0FPacketConfirmTransaction) {
                    C0FPacketConfirmTransaction confirmTransaction = (C0FPacketConfirmTransaction)((EventPacket) e).getPacket();

                    for(int i = 0; i < 4; ++i) {
                        this.packetQueue.add(confirmTransaction);
                    }

                    e.setCancelled(true);
                }
            }

            if(mode.is("Verus-Semi")) {
                if (mc.thePlayer != null && mc.thePlayer.ticksExisted == 0)
                    list.clear();
                Packet packet = ((EventPacket) e).getPacket();
                if (packet instanceof C03PacketPlayer) {
                    double yPos = Math.round(mc.thePlayer.posY / 0.015625) * 0.015625;
                    mc.thePlayer.setPosition(mc.thePlayer.posX, yPos, mc.thePlayer.posZ);
                    if (mc.thePlayer.ticksExisted % 45 == 0) {
                        Resolute.addChatMessage("You can fly now");
                        mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
                        mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY - 11.725, mc.thePlayer.posZ, false));
                        mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
                    }
                } else if (((EventPacket) e).getPacket() instanceof S08PacketPlayerPosLook) {
                    S08PacketPlayerPosLook packet1 = ((EventPacket) e).getPacket();
                    double x = packet1.getX() - this.mc.thePlayer.posX;
                    double y = packet1.getY() - this.mc.thePlayer.posY;
                    double z = packet1.getZ() - this.mc.thePlayer.posZ;
                    double diff = Math.sqrt(x * x + y * y + z * z);
                    if (diff <= 8.0D) {
                        if(removeLagBack.isEnabled()) {
                            e.setCancelled(true);
                            mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(packet1.getX(), packet1.getY(), packet1.getZ(), packet1.getYaw(), packet1.getPitch(), true));
                        }
                    }
                } else if (packet instanceof C0FPacketConfirmTransaction) {
                    for (int i = 0; i < 4; i++) {
                        list.add(packet);
                    }
                    e.setCancelled(true);
                }
            }

            if(mode.is("Minemen")) {
                if(c00Prop.isEnabled()) {
                    if(KillAura.target != null) {
                        if(((EventPacket) e).getPacket() instanceof C00PacketKeepAlive) {
                            e.setCancelled(true);
                        }
                    }
                }
            }

            if(mode.is("Minemen")) {
                if(c0fProp.isEnabled()) {
                    if(KillAura.target != null) {
                        if(((EventPacket) e).getPacket() instanceof C0FPacketConfirmTransaction) {
                            e.setCancelled(true);
                        }
                    }
                }
            }

            if (mode.is("Verus Combat")) {
                if(((EventPacket) e).getPacket() instanceof C0FPacketConfirmTransaction) {
                    C0FPacketConfirmTransaction confirmTransaction = (C0FPacketConfirmTransaction) ((EventPacket) e).getPacket();
                    if(mc.thePlayer.ticksExisted % 3 == 0) {
                        confirmTransaction.uid = -1;
                    }else{
                        e.setCancelled(true);
                    }
                }

                if(((EventPacket) e).getPacket() instanceof C00PacketKeepAlive) {
                    C00PacketKeepAlive keepAlive = (C00PacketKeepAlive) ((EventPacket) e).getPacket();
                    keepAlive.key = -6;
                }
            }

            if(mode.is("Verus Semi")) {
                if (this.mc.thePlayer != null && this.mc.thePlayer.ticksExisted < 8) {
                    this.packetQueue.clear();
                }

                if (((EventPacket) e).getPacket() instanceof C00PacketKeepAlive) {
                    this.packetQueue.add(((EventPacket) e).getPacket());
                    e.setCancelled(true);
                } else if (((EventPacket) e).getPacket() instanceof C03PacketPlayer) {
                    double yPos = (double)Math.round(this.mc.thePlayer.posY / 0.015625D) * 0.015625D;
                    this.mc.thePlayer.setPosition(this.mc.thePlayer.posX, yPos, this.mc.thePlayer.posZ);
                    if (this.mc.thePlayer.ticksExisted % 45 == 0) {
                        mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, this.mc.thePlayer.posY, this.mc.thePlayer.posZ, true));
                        mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, 1.0E159D, this.mc.thePlayer.posZ, false));
                        mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, this.mc.thePlayer.posY, this.mc.thePlayer.posZ, true));
                    }
                } else if (((EventPacket) e).getPacket() instanceof S08PacketPlayerPosLook) {
                    S08PacketPlayerPosLook packet = (S08PacketPlayerPosLook)((EventPacket) e).getPacket();
                    double x = packet.getX() - this.mc.thePlayer.posX;
                    double y = packet.getY() - this.mc.thePlayer.posY;
                    double z = packet.getZ() - this.mc.thePlayer.posZ;
                    double diff = Math.sqrt(x * x + y * y + z * z);
                    if (diff <= 8.0D) {
                        e.setCancelled(true);
                        mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), true));
                    }
                } else if (((EventPacket) e).getPacket() instanceof C0FPacketConfirmTransaction) {
                    C0FPacketConfirmTransaction packet = (C0FPacketConfirmTransaction)((EventPacket) e).getPacket();

                    for(int i = 0; i < 4; ++i) {
                        this.packetQueue.add(packet);
                    }

                    e.setCancelled(true);
                }
            }

            if(mode.is("AACv5")) {
                double x;
                double y;

                if(((EventPacket) e).getPacket() instanceof S08PacketPlayerPosLook) {
                    S08PacketPlayerPosLook packet = ((EventPacket) e).getPacket();

                    if (this.aac5Status == 0) {
                        this.mc.thePlayer.setPosition(packet.getX(), packet.getY(), packet.getZ());
                        mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(this.mc.thePlayer.posX, this.mc.thePlayer.posY, this.mc.thePlayer.posZ, packet.getYaw(), packet.getPitch(), false));
                        if (this.mc.thePlayer.posX == this.aac5LastPosX) {
                            ++this.aac5Same;
                            if (this.aac5Same >= 5) {
                                this.aac5Status = 1;
                                this.mc.timer.timerSpeed = 0.65F;
                                this.aac5Same = 0;
                                return;
                            }
                        }

                        x = 0.12D;
                        y = Math.toRadians((double)this.mc.thePlayer.rotationYaw);
                        this.mc.thePlayer.setPosition(this.mc.thePlayer.posX + -Math.sin(y) * x, this.mc.thePlayer.posY, this.mc.thePlayer.posZ + Math.cos(y) * x);
                        mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, this.mc.thePlayer.posY, this.mc.thePlayer.posZ, false));
                        this.aac5LastPosX = this.mc.thePlayer.posX;
                        mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, Double.MAX_VALUE, this.mc.thePlayer.posZ, true));
                    } else if (this.mc.timer.timerSpeed <= 1.65F) {
                        ++this.aac5Same;
                        if (this.aac5Same >= this.aac5SameReach) {
                            this.aac5Same = 0;
                            this.aac5SameReach = (int)((float)this.aac5SameReach + 13.0F);
                            mc.timer.timerSpeed += 0.4F;
                        }
                    }
                }
            }

            if(mode.is("Interact")) {
                if(((EventPacket) e).getPacket() instanceof C08PacketPlayerBlockPlacement) {
                    mc.getNetHandler().addToSendQueue(new C03PacketPlayer());
                    mc.getNetHandler().addToSendQueue(new C07PacketPlayerDigging());
                    mc.getNetHandler().addToSendQueue(new C0FPacketConfirmTransaction());
                }
            }


            if(mode.is("Ping")) {
                if(e instanceof EventPacket) {
                    if(((EventPacket) e).getPacket() instanceof C0FPacketConfirmTransaction) {
                        C0FPacketConfirmTransaction packet = (C0FPacketConfirmTransaction) ((EventPacket) e).getPacket();
                        if (packet.getUid() < 0) {
                            packets.add(packet);
                            e.setCancelled(true);
                        }
                    } else if (((EventPacket) e).getPacket() instanceof C00PacketKeepAlive) {
                        packets.add(((EventPacket) e).getPacket());
                        e.setCancelled(true);
                    }
                }
            }

            if(mode.is("LatinPlay")) {
                if(e instanceof EventPacket) {
                    if(((EventPacket) e).getPacket() instanceof C0FPacketConfirmTransaction) {
                        C0FPacketConfirmTransaction packet = ((EventPacket) e).getPacket();
                        if (packet.getUid() < 0) {
                            packets.add(packet);
                            e.setCancelled(true);
                        }
                    } else if (((EventPacket) e).getPacket() instanceof C00PacketKeepAlive) {
                        packets.add(((EventPacket) e).getPacket());
                        e.setCancelled(true);
                    }
                }
            }


            if(mode.is("Vicnix")) {
                if (((EventPacket) e).getPacket() instanceof C0FPacketConfirmTransaction) {
                    e.setCancelled(true);
                }
                if (((EventPacket) e).getPacket() instanceof C13PacketPlayerAbilities) {
                    C13PacketPlayerAbilities C13 = ((EventPacket) e).getPacket();
                    C13.setAllowFlying(true);
                    C13.setCreativeMode(true);
                    C13.setInvulnerable(true);
                    C13.setFlying(false);
                    C13.allowFlying = true;
                    C13.creativeMode = true;
                    C13.invulnerable = true;
                    C13.flying = false;
                }
            }

            if(mode.is("Karhu Dev")) {
                if(mc.thePlayer != null && mc.theWorld != null) {
                    if (((EventPacket) e).getPacket() instanceof C00Handshake) {
                        e.setCancelled(true);
                    }
                    if (((EventPacket) e).getPacket() instanceof C00PacketKeepAlive) {
                        e.setCancelled(true);
                    }
                    if (((EventPacket) e).getPacket() instanceof S00PacketKeepAlive) {
                        e.setCancelled(true);
                    }
                    if (((EventPacket) e).getPacket() instanceof S39PacketPlayerAbilities) {
                        S39PacketPlayerAbilities S39 = (S39PacketPlayerAbilities) ((EventPacket) e).getPacket();
                        S39.setAllowFlying(true);
                        S39.setCreativeMode(true);
                        S39.setFlying(true);
                        S39.setInvulnerable(true);
                        S39.allowFlying = true;
                        S39.creativeMode = true;
                        S39.flying = true;
                        S39.invulnerable = true;
                    }
                    if (((EventPacket) e).getPacket() instanceof C13PacketPlayerAbilities) {
                        C13PacketPlayerAbilities C13 = (C13PacketPlayerAbilities) ((EventPacket) e).getPacket();
                        C13.setAllowFlying(true);
                        C13.setCreativeMode(true);
                        C13.setFlying(true);
                        C13.setInvulnerable(true);
                        C13.allowFlying = true;
                        C13.creativeMode = true;
                        C13.flying = true;
                        C13.invulnerable = true;
                    }
                    if (mc.thePlayer.ticksExisted > 3) {
                        if (((EventPacket) e).getPacket() instanceof C03PacketPlayer) {
                            C03PacketPlayer C03 = (C03PacketPlayer) ((EventPacket) e).getPacket();
                            C03.onGround = false;
                        }
                    }
                }
            }

            if(mode.is("Vicnix Old")) {
                if(((EventPacket) e).getPacket() instanceof C03PacketPlayer) {
                    C03PacketPlayer packetPlayer = (C03PacketPlayer) ((EventPacket) e).getPacket();
                    PlayerCapabilities c = new PlayerCapabilities ();
                    c.allowFlying = true;
                    c.isCreativeMode = true;
                    c.disableDamage = true;
                    packetPlayer.moving = false;
                    if(mc.thePlayer.ticksExisted % 2 == 0) {
                        packetPlayer.onGround = true;
                        c.setFlySpeed(MAX_VALUE);
                        c.setPlayerWalkSpeed(Float.POSITIVE_INFINITY);
                        e.setCancelled(true);
                    }
                }
            }

            if(mode.is("Ghostly")) {
                if(((EventPacket) e).getPacket()instanceof C00PacketKeepAlive) {
                    C00PacketKeepAlive packet = (C00PacketKeepAlive) ((EventPacket) e).getPacket();
                    packet.key = -1;
                    e.setCancelled(true);
                }
                if(((EventPacket) e).getPacket()instanceof C0FPacketConfirmTransaction) {
                    C0FPacketConfirmTransaction packetConfirmTransaction = (C0FPacketConfirmTransaction) ((EventPacket) e).getPacket();
                    packetConfirmTransaction.uid = -6;
                    e.setCancelled(true);
                }
                if(((EventPacket) e).getPacket()instanceof S32PacketConfirmTransaction) {
                    S32PacketConfirmTransaction pee = (S32PacketConfirmTransaction) ((EventPacket) e).getPacket();
                    e.setCancelled(true);
                }
            }

            if(mode.is("MineplexCombat")) {
                if(((EventPacket) e).getPacket() instanceof C00PacketKeepAlive) {
                    C00PacketKeepAlive packetKeepAlive = (C00PacketKeepAlive) ((EventPacket) e).getPacket ();
                    packetKeepAlive.key -= RandomUtils.nextInt ( 3, 128 );
                    e.setCancelled ( true );
                }

                if(((EventPacket) e).getPacket() instanceof C0CPacketInput) {
                    C0CPacketInput C0C = (C0CPacketInput) ((EventPacket) e).getPacket ();
                    C0C.strafeSpeed -= RandomUtils.nextInt ( 32324, 242352 );
                    C0C.jumping = true;
                    C0C.forwardSpeed -= RandomUtils.nextInt ( 14 / 100, 43 / 100 );
                }

                if(((EventPacket) e).getPacket() instanceof C0FPacketConfirmTransaction) {
                    C0FPacketConfirmTransaction packetConfirmTransaction = (C0FPacketConfirmTransaction) ((EventPacket) e).getPacket ();
                    packetConfirmTransaction.uid -= RandomUtils.nextInt ( 4, 130 );
                    e.setCancelled ( true );
                }
            }


            if(mode.is("Capabilities")) {

                if(e.isOutgoing()) {
                    if(((EventPacket) e).getPacket() instanceof C0BPacketEntityAction) {
                        e.setCancelled(true);

                    }

                    if(((EventPacket) e).getPacket() instanceof C03PacketPlayer) {

                        this.mc.thePlayer.sendQueue.addToSendQueue ( (Packet) new C0CPacketInput ( MAX_VALUE, MAX_VALUE, true, true ) );
                        PlayerCapabilities capabilities = new PlayerCapabilities ();
                        capabilities.allowFlying = true;
                        capabilities.disableDamage = true;
                        capabilities.isFlying = true;
                        capabilities.isCreativeMode = true;
                        capabilities.allowEdit = true;
                        capabilities.setFlySpeed ( Float.POSITIVE_INFINITY );
                        capabilities.setPlayerWalkSpeed ( Float.POSITIVE_INFINITY );
                        this.mc.thePlayer.sendQueue.addToSendQueue ( (Packet) new C13PacketPlayerAbilities ( capabilities ) );
                    }

                    if(((EventPacket) e).getPacket() instanceof S39PacketPlayerAbilities) {
                        System.out.println("C03");
                        S39PacketPlayerAbilities S39 = (S39PacketPlayerAbilities) ((EventPacket) e).getPacket ();
                        S39.setAllowFlying(true);
                        S39.setCreativeMode(true);
                        S39.setFlying(true);
                        S39.setInvulnerable(true);
                        S39.allowFlying = true;
                        S39.creativeMode = true;
                        S39.flying = true;
                        S39.invulnerable = true;
                    }
                }

                if(e.isIncoming()) {
                    if(((EventPacket) e).getPacket() instanceof C03PacketPlayer) {

                        this.mc.thePlayer.sendQueue.addToSendQueueSilent ( new C0CPacketInput ( MAX_VALUE, MAX_VALUE, true, true ) );
                        PlayerCapabilities c = new PlayerCapabilities ();
                        c.allowFlying = true;
                        c.disableDamage = true;
                        c.isFlying = true;
                        c.isCreativeMode = true;
                        c.allowEdit = true;
                        c.setFlySpeed ( Float.POSITIVE_INFINITY );
                        c.setPlayerWalkSpeed ( Float.POSITIVE_INFINITY );
                        this.mc.thePlayer.sendQueue.addToSendQueueSilent ( new C13PacketPlayerAbilities ( c ) );
                    }
                }
            }
        }
    }
}
